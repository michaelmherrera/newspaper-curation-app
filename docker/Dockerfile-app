# This image is used both for the workers and the web server containers; this
# is not a great practice.  In a production environment you probably would want
# a much slimmer web server that only had the "server" binary and the static
# files and templates.  The worker system would need a bit more, like the
# openjpeg tools, poppler, etc., but still wouldn't need the whole Go stack or
# a Maria DB client.
FROM fedora:27
MAINTAINER Jeremy Echols <jechols@uoregon.edu>

RUN dnf update -y

# Get poppler compilation done early - this is the painful part
RUN dnf install -y make automake gcc-c++
RUN dnf install -y poppler-utils poppler-devel fontconfig-devel libjpeg-devel

# Grab and patch poppler-utils: 0.22.5 (this is a known-good release for our patch)
WORKDIR /usr/local/
RUN curl -s "https://poppler.freedesktop.org/poppler-0.22.5.tar.gz" | tar -xz
RUN curl -s "https://raw.githubusercontent.com/uoregon-libraries/pdftotext/master/pdftotext.cc" \
         > /usr/local/poppler-0.22.5/utils/pdftotext.cc

# Compile
WORKDIR /usr/local/poppler-0.22.5
RUN ./configure
RUN make

# Link the patched pdftotext binary
RUN mkdir -p /usr/local/pdf-to-chronam/bin
RUN ln /usr/local/poppler-0.22.5/utils/pdftotext /usr/local/bin/

# Oh, right, and openjpeg2 is painful as well because it has to be installed
# *from source* in order to recognize libpng
WORKDIR /usr/local/
RUN curl -sL "https://github.com/uclouvain/openjpeg/archive/v2.3.0.tar.gz" | tar -xz
RUN dnf install -y libtiff-devel libpng-devel cmake
RUN mkdir /usr/local/openjpeg-2.3.0/build
WORKDIR /usr/local/openjpeg-2.3.0/build
RUN cmake ..
RUN make
RUN make install
RUN make clean

# Less expensive system dependencies
RUN dnf install -y findutils
RUN dnf install -y GraphicsMagick ghostscript
RUN dnf install -y tar
RUN dnf install -y git
RUN dnf install -y golang
RUN dnf install -y mariadb

# Go ENV setup
ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

# Golang dependencies
RUN go get -u bitbucket.org/liamstask/goose/cmd/goose
RUN go get -u github.com/golang/lint/golint
RUN go get -u github.com/constabulary/gb/...

WORKDIR /usr/local/src/black-mamba

# Grab and build the source before worrying about config files so when config
# changes we aren't having to rebuild everything
#
# TODO: When we have a public repo, just pull that instead of this pain
RUN mkdir -p /usr/local/black-mamba
COPY ./Makefile /usr/local/src/black-mamba/Makefile
COPY ./validate.sh /usr/local/src/black-mamba/validate.sh
COPY ./src /usr/local/src/black-mamba/src
COPY ./depfile /usr/local/src/black-mamba/depfile
COPY ./vendor/manifest /usr/local/src/black-mamba/vendor/manifest
RUN make
RUN cp -r ./bin /usr/local/black-mamba/bin

# We copy other files very granularly in order to avoid copying in binaries,
# vendored sources, sensitive settings, etc.; we want to make sure this
# dockerfile stands on its own
COPY ./db/migrations /usr/local/black-mamba/db/migrations
COPY ./static /usr/local/black-mamba/static
COPY ./templates /usr/local/black-mamba/templates
COPY ./settings-example /usr/local/black-mamba/settings
COPY ./db/dbconf-example.yml /usr/local/black-mamba/db/dbconf.yml

# Utilities
COPY ./docker/wait_for_database /usr/local/bin/
COPY ./docker/entrypoint.sh /entrypoint.sh

# Get the cache directory prepared
RUN mkdir -p /var/local/news/black-mamba/cache

WORKDIR /usr/local/black-mamba
ENTRYPOINT ["/entrypoint.sh"]
